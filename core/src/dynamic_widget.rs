use crate::{impl_proxy_query, impl_query_self_only, prelude::*, widget_tree::WidgetTree};
use std::cell::RefCell;

/// the information of a widget generated by `DynWidget`.
pub(crate) enum DynWidgetGenInfo {
  /// DynWidget generate single result, and have static children. The depth
  /// describe the distance from first dynamic widget (self) to the static
  /// child.
  DynDepth(usize),
  /// `DynWidget` without static children, and the whole subtree of generated
  /// widget are dynamic widgets. The value record how many dynamic siblings
  /// have.
  WholeSubtree(usize),
}

/// Widget that as a container of dynamic widgets

#[derive(Declare)]
pub struct DynWidget<D> {
  #[declare(convert=custom)]
  pub(crate) dyns: Option<D>,
}

impl<D> DynWidgetDeclarer<D> {
  pub fn dyns(mut self, d: D) -> Self {
    self.dyns = Some(Some(d));
    self
  }
}

impl<D> DynWidget<D> {
  #[inline]
  pub const fn new(dyns: D) -> D { dyns }

  pub fn set_declare_dyns(&mut self, dyns: D) { self.dyns = Some(dyns); }

  pub(crate) fn into_inner(mut self) -> D {
    self
      .dyns
      .take()
      .unwrap_or_else(|| unreachable!("stateless `DynWidget` must be initialized."))
  }
}

/// Widget help to limit which `DynWidget` can be a parent widget and which can
/// be a child.
pub(crate) struct DynRender<D> {
  dyn_widgets: Stateful<DynWidget<D>>,
  self_render: RefCell<Box<dyn Render>>,
  gen_info: RefCell<Option<DynWidgetGenInfo>>,
  cast_to_vec: fn(D) -> Vec<Widget>,
}

pub(crate) trait IntoDynRender<M, D> {
  fn into_dyn_render(self) -> DynRender<D>;
}

// A dynamic widget must be stateful, depends others.
impl<D: 'static> Render for DynRender<D> {
  fn perform_layout(&self, clamp: BoxClamp, ctx: &mut LayoutCtx) -> Size {
    self.regen_if_need(ctx);
    self.self_render.perform_layout(clamp, ctx)
  }

  fn paint(&self, ctx: &mut PaintingCtx) { self.self_render.paint(ctx) }

  fn only_sized_by_parent(&self) -> bool { self.self_render.only_sized_by_parent() }

  fn hit_test(&self, ctx: &TreeCtx, pos: Point) -> HitTest { self.self_render.hit_test(ctx, pos) }

  fn can_overflow(&self) -> bool { self.self_render.can_overflow() }
}

impl<D> DynRender<D> {
  fn new(dyns: Stateful<DynWidget<D>>, cast_to_vec: fn(D) -> Vec<Widget>) -> Self {
    Self {
      dyn_widgets: dyns,
      self_render: RefCell::new(Box::new(Void)),
      gen_info: <_>::default(),
      cast_to_vec,
    }
  }
}

impl<D, M> IntoDynRender<M, D> for Stateful<DynWidget<D>>
where
  M: ImplMarker,
  D: IntoWidget<M> + 'static,
{
  fn into_dyn_render(self) -> DynRender<D> { DynRender::new(self, |d| vec![d.into_widget()]) }
}

impl<D, M> IntoDynRender<&dyn Iterator<Item = M>, D> for Stateful<DynWidget<D>>
where
  M: ImplMarker,
  D: IntoIterator,
  D::Item: IntoWidget<M> + 'static,
{
  fn into_dyn_render(self) -> DynRender<D> {
    DynRender::new(self, |d| {
      d.into_iter().map(IntoWidget::into_widget).collect()
    })
  }
}

impl<D: 'static> Query for DynRender<D> {
  impl_proxy_query!(self.self_render, self.dyn_widgets);
}

impl<D: 'static> Query for DynWidget<D> {
  impl_query_self_only!();
}

impl<D> DynRender<D> {
  fn regen_if_need(&self, ctx: &mut LayoutCtx) {
    let mut dyn_widget = self.dyn_widgets.silent_ref();
    let Some(new_widgets) = dyn_widget.dyns.take() else {
      return
    };

    let mut gen_info = self.gen_info.borrow_mut();
    let mut gen_info = gen_info.get_or_insert_with(|| {
      if ctx.has_child() {
        DynWidgetGenInfo::DynDepth(1)
      } else {
        DynWidgetGenInfo::WholeSubtree(1)
      }
    });

    let sign = ctx.id;
    let tree = &mut ctx.tree;

    let mut new_widgets = (self.cast_to_vec)(new_widgets)
      .into_iter()
      .filter_map(|w| w.into_subtree(None, tree))
      .collect::<Vec<_>>();
    if new_widgets.is_empty() {
      new_widgets.push(tree.empty_node());
    }

    // Place the real old render in node, the dyn render in node keep.
    std::mem::swap(
      &mut *self.self_render.borrow_mut(),
      sign.assert_get_mut(tree),
    );

    // swap the new sign and old, so we can always keep the sign id not change.
    sign.swap_id(new_widgets[0], tree);
    let old_sign = new_widgets[0];
    new_widgets[0] = sign;

    match &mut gen_info {
      DynWidgetGenInfo::DynDepth(depth) => {
        assert_eq!(new_widgets.len(), 1);

        let declare_child_parent = single_down(old_sign, tree, *depth as isize - 1);
        let (new_leaf, down_level) = down_to_leaf(sign, tree);

        let new_depth = down_level + 1;
        if let Some(declare_child_parent) = declare_child_parent {
          // Safety: control two subtree not intersect.
          let (tree1, tree2) = unsafe { tree.split_tree() };
          declare_child_parent
            .children(tree1)
            .for_each(|c| new_leaf.append(c, tree2));
        }

        old_sign.insert_after(sign, tree);
        old_sign.remove_subtree(tree);
        single_on_mounted(sign, new_depth, tree);

        *depth = new_depth;
      }

      DynWidgetGenInfo::WholeSubtree(siblings) => {
        let mut cursor = old_sign;
        new_widgets.iter().rev().for_each(|n| {
          cursor.insert_before(*n, tree);
          cursor = *n;
        });

        let mut remove = Some(old_sign);
        (0..*siblings).for_each(|_| {
          let o = remove.unwrap();
          remove = o.next_sibling(tree);
          o.remove_subtree(tree);
        });

        new_widgets.iter().for_each(|n| {
          n.on_mounted_subtree(tree);
        });
        *siblings = new_widgets.len();
      }
    };
    // Place the dynRender back in node.
    std::mem::swap(
      &mut *self.self_render.borrow_mut(),
      sign.assert_get_mut(tree),
    );
  }
}

fn single_down(id: WidgetId, tree: &WidgetTree, mut down_level: isize) -> Option<WidgetId> {
  let mut res = Some(id);
  while down_level > 0 {
    down_level -= 1;
    res = res.unwrap().single_child(tree);
  }
  res
}

fn down_to_leaf(id: WidgetId, tree: &WidgetTree) -> (WidgetId, usize) {
  let mut leaf = id;
  let mut depth = 0;
  while let Some(c) = leaf.single_child(tree) {
    leaf = c;
    depth += 1;
  }
  (leaf, depth)
}

fn single_on_mounted(from: WidgetId, mut level: usize, tree: &mut WidgetTree) -> Option<WidgetId> {
  let mut next = Some(from);
  while level > 0 {
    let c = next.unwrap();
    c.on_mounted(tree);
    next = c.single_child(tree);

    level -= 1;
  }
  next
}

// impl IntoWidget

// only `DynWidget` gen single widget can as a parent widget
impl<M, D> IntoWidget<Concrete<M>> for Stateful<DynWidget<D>>
where
  M: ImplMarker,
  D: IntoWidget<M> + 'static,
{
  #[inline]
  fn into_widget(self) -> Widget { self.into_dyn_render().into_widget() }
}

impl<M, D> IntoWidget<Concrete<Option<M>>> for Stateful<DynWidget<Option<D>>>
where
  M: ImplMarker,
  D: IntoWidget<M> + 'static,
{
  #[inline]
  fn into_widget(self) -> Widget { self.into_dyn_render().into_widget() }
}

impl<D, M> IntoWidget<M> for DynWidget<D>
where
  M: ImplMarker,
  D: IntoWidget<M> + 'static,
{
  #[inline]
  fn into_widget(self) -> Widget { self.into_inner().into_widget() }
}

#[cfg(test)]
mod tests {
  use crate::{prelude::*, test::*, widget_tree::WidgetTree};

  #[test]
  fn expr_widget_as_root() {
    let size = Size::zero().into_stateful();
    let w = widget! {
      track { size: size.clone() }
      DynWidget {
        dyns: MockBox { size: size.clone() },
        Void {}
      }
    };
    let mut tree = WidgetTree::new(w, <_>::default());
    tree.layout(Size::zero());
    let ids = tree.root().descendants(&tree).collect::<Vec<_>>();
    assert_eq!(ids.len(), 2);
    {
      *size.state_ref() = Size::new(1., 1.);
    }
    tree.layout(Size::zero());
    let new_ids = tree.root().descendants(&tree).collect::<Vec<_>>();
    assert_eq!(new_ids.len(), 2);

    assert_eq!(ids[1], new_ids[1]);
  }

  #[test]
  fn expr_widget_with_declare_child() {
    let size = Size::zero().into_stateful();
    let w = widget! {
      track { size: size.clone() }
      MockBox {
        size: Size::zero(),
        DynWidget {
          dyns: MockBox { size: size.clone() },
          Void {}
        }
      }
    };
    let mut tree = WidgetTree::new(w, <_>::default());
    tree.layout(Size::zero());
    let ids = tree.root().descendants(&tree).collect::<Vec<_>>();
    assert_eq!(ids.len(), 3);
    {
      *size.state_ref() = Size::new(1., 1.);
    }
    tree.layout(Size::zero());
    let new_ids = tree.root().descendants(&tree).collect::<Vec<_>>();
    assert_eq!(new_ids.len(), 3);

    assert_eq!(ids[0], new_ids[0]);
    assert_eq!(ids[2], new_ids[2]);
  }

  #[test]
  fn expr_widget_mounted_new() {
    let v = vec![1, 2, 3].into_stateful();

    let new_cnt = 0.into_stateful();
    let drop_cnt = 0.into_stateful();
    let w = widget! {
      track {
        v: v.clone(),
        new_cnt: new_cnt.clone(),
        drop_cnt: drop_cnt.clone(),
      }

      MockMulti { DynWidget {
        dyns: {
          v.iter().map(move |_| {
            widget! {
              MockBox{
                size: Size::zero(),
                mounted: move |_| *new_cnt += 1,
                disposed: move |_| *drop_cnt += 1
              }
            }
          }).collect::<Vec<_>>()
        }
      }}
    };
    let mut tree = WidgetTree::new(w, <_>::default());
    tree.layout(Size::zero());
    assert_eq!(*new_cnt.raw_ref(), 3);
    assert_eq!(*drop_cnt.raw_ref(), 0);

    v.state_ref().push(4);
    tree.layout(Size::zero());
    assert_eq!(*new_cnt.raw_ref(), 7);
    assert_eq!(*drop_cnt.raw_ref(), 3);

    v.state_ref().pop();
    tree.layout(Size::zero());
    assert_eq!(*new_cnt.raw_ref(), 10);
    assert_eq!(*drop_cnt.raw_ref(), 7);
  }
}
